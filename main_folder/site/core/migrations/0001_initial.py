# Generated by Django 4.2.7 on 2025-04-22 12:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalDBConfig",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Название")),
                ("host", models.CharField(max_length=255, verbose_name="Хост")),
                ("port", models.IntegerField(verbose_name="Порт")),
                (
                    "database",
                    models.CharField(max_length=100, verbose_name="База данных"),
                ),
                (
                    "username",
                    models.CharField(max_length=100, verbose_name="Имя пользователя"),
                ),
                ("password", models.CharField(max_length=255, verbose_name="Пароль")),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Активно"),
                ),
                (
                    "last_sync",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Последняя синхронизация"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PredictionRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "inflation_rate",
                    models.FloatField(default=4.0, verbose_name="Инфляция, %"),
                ),
                (
                    "central_bank_rate",
                    models.FloatField(default=7.0, verbose_name="Ставка ЦБ, %"),
                ),
                (
                    "consumer_price_index",
                    models.FloatField(
                        default=4.0, verbose_name="Индекс потребительских цен, %"
                    ),
                ),
                (
                    "gdp_growth_rate",
                    models.FloatField(default=2.0, verbose_name="Темп роста ВВП, %"),
                ),
                (
                    "mortgage_rate",
                    models.FloatField(
                        default=8.0, verbose_name="Средняя ставка по ипотеке, %"
                    ),
                ),
                (
                    "deposit_rate",
                    models.FloatField(
                        default=5.0, verbose_name="Средняя доходность депозитов, %"
                    ),
                ),
                (
                    "investment_strategy",
                    models.CharField(
                        choices=[
                            ("resale", "Перепродажа"),
                            ("long_rent", "Долгосрочная аренда"),
                            ("short_rent", "Краткосрочная аренда"),
                            ("combined", "Комбинированная"),
                        ],
                        max_length=10,
                        verbose_name="Стратегия использования",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("location_lat", models.FloatField(verbose_name="Широта")),
                ("location_lng", models.FloatField(verbose_name="Долгота")),
                (
                    "location_address",
                    models.CharField(max_length=255, verbose_name="Адрес"),
                ),
                ("area", models.FloatField(verbose_name="Площадь, м²")),
                (
                    "property_type",
                    models.CharField(
                        choices=[
                            ("studio", "Студия"),
                            ("1-room", "1-комнатная"),
                            ("2-room", "2-комнатная"),
                            ("3-room", "3-комнатная"),
                            ("4-room", "4+ комнатная"),
                        ],
                        max_length=10,
                        verbose_name="Тип помещения",
                    ),
                ),
                ("build_year", models.IntegerField(verbose_name="Год постройки")),
                (
                    "finishing_type",
                    models.CharField(
                        choices=[
                            ("no", "Без отделки"),
                            ("rough", "Черновая"),
                            ("fine", "Чистовая"),
                            ("furniture", "С мебелью"),
                        ],
                        max_length=10,
                        verbose_name="Отделка",
                    ),
                ),
                ("floor", models.IntegerField(verbose_name="Этаж")),
                ("total_floors", models.IntegerField(verbose_name="Всего этажей")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="PredictionResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "scenario_type",
                    models.CharField(
                        choices=[
                            ("positive", "Позитивный"),
                            ("realistic", "Реалистичный"),
                            ("conservative", "Консервативный"),
                        ],
                        max_length=12,
                        verbose_name="Тип сценария",
                    ),
                ),
                (
                    "predicted_price",
                    models.FloatField(verbose_name="Прогнозируемая стоимость"),
                ),
                (
                    "price_dynamics_data",
                    models.JSONField(verbose_name="Данные динамики цен"),
                ),
                (
                    "comparison_data",
                    models.JSONField(verbose_name="Данные для сравнения"),
                ),
                (
                    "location_attractiveness_factor",
                    models.FloatField(
                        verbose_name="Привлекательность района/локации (УРЖ), %"
                    ),
                ),
                (
                    "transport_accessibility_factor",
                    models.FloatField(verbose_name="Транспортная доступность, %"),
                ),
                (
                    "social_infrastructure_factor",
                    models.FloatField(
                        verbose_name="Социальная инфраструктура района, %"
                    ),
                ),
                (
                    "location_development_factor",
                    models.FloatField(verbose_name="Перспективы развития локации, %"),
                ),
                (
                    "macroeconomic_factor",
                    models.FloatField(verbose_name="Макроэкономические факторы, %"),
                ),
                (
                    "annual_yield",
                    models.FloatField(verbose_name="Ожидаемая доходность, % в год"),
                ),
                (
                    "investment_horizon",
                    models.IntegerField(verbose_name="Инвестиционный горизонт, лет"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "prediction_request",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="results",
                        to="core.predictionrequest",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="predictionrequest",
            name="property_data",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="predictions",
                to="core.property",
            ),
        ),
        migrations.AddField(
            model_name="predictionrequest",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="prediction_requests",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
    ]
